{
    "Comment": "Execute Ansible Playbooks separately using SSM Run Command with AWS-ApplyAnsiblePlaybooks",
    "StartAt": "AssumeRole",
    "States": {
      "AssumeRole": {
        "Type": "Task",
        "Parameters": {
          "RoleArn.$": "States.Format('arn:aws:iam::{}:role/AFT-CrossAccountAnsibleRole', $.account_id)",
          "RoleSessionName": "AFTAnsibleExecution"
        },
        "Resource": "arn:aws:states:::aws-sdk:sts:assumeRole",
        "ResultPath": "$.AssumedRole",
        "Next": "WaitForInstanceReady"
      },
      "WaitForInstanceReady": {
        "Type": "Wait",
        "Seconds": 60,
        "Next": "CheckInstanceStatus"
      },
      "CheckInstanceStatus": {
        "Type": "Task",
        "Resource": "arn:aws:states:::aws-sdk:ec2:describeInstanceStatus",
        "Credentials": {
          "RoleArn.$": "$.AssumedRole.AssumedRoleUser.Arn"
        },
        "Parameters": {
          "InstanceIds": ["${AFTInstanceId}"]
        },
        "Next": "EvaluateInstanceStatus",
        "ResultPath": "$.InstanceStatus"
      },
      "EvaluateInstanceStatus": {
        "Type": "Choice",
        "Choices": [
          {
            "Variable": "$.InstanceStatus.InstanceStatuses[0].InstanceStatus.Status",
            "StringEquals": "ok",
            "Next": "InstallDependencies"
          }
        ],
        "Default": "WaitForInstanceReady"
      },
      "InstallDependencies": {
        "Type": "Task",
        "Resource": "arn:aws:states:::aws-sdk:ssm:sendCommand",
        "Credentials": {
          "RoleArn.$": "$.AssumedRole.AssumedRoleUser.Arn"
        },
        "Parameters": {
          "DocumentName": "AWS-RunShellScript",
          "InstanceIds": ["${AFTInstanceId}"],
          "Parameters": {
            "commands": [
              "#!/bin/bash",
              "yum update -y",
              "yum install -y ansible python3-pip",
              "pip3 install boto3 botocore",
              "ansible-galaxy collection install amazon.aws"
            ]
          }
        },
        "Next": "WaitForInstallation",
        "ResultPath": "$.InstallDependenciesResult"
      },
      "WaitForInstallation": {
        "Type": "Wait",
        "Seconds": 10,
        "Next": "ExecutePlaybook1"
      },
      "ExecutePlaybook1": {
        "Type": "Task",
        "Resource": "arn:aws:states:::aws-sdk:ssm:sendCommand",
        "Credentials": {
          "RoleArn.$": "$.AssumedRole.AssumedRoleUser.Arn"
        },
        "Parameters": {
          "DocumentName": "AWS-ApplyAnsiblePlaybooks",
          "InstanceIds": ["${AFTInstanceId}"],
          "Parameters": {
            "SourceType": ["S3"],
            "SourceInfo": ["{\"path\":\"https://s3.amazonaws.com/somebuckethaha/playbooks.zip\"}"],
            "InstallDependencies": ["False"],
            "PlaybookFile": ["playbook1.yml"],
            "ExtraVariables": ["SSM=True"],
            "Check": ["False"],
            "Verbose": ["-v"]
          }
        },
        "Retry": [
          {
            "ErrorEquals": ["States.ALL"],
            "IntervalSeconds": 30,
            "MaxAttempts": 3,
            "BackoffRate": 2
          }
        ],
        "Next": "WaitForPlaybook1",
        "ResultPath": "$.ExecutePlaybook1Result"
      },
      "WaitForPlaybook1": {
        "Type": "Wait",
        "Seconds": 10,
        "Next": "CheckPlaybook1Status"
      },
      "CheckPlaybook1Status": {
        "Type": "Task",
        "Resource": "arn:aws:states:::aws-sdk:ssm:getCommandInvocation",
        "Credentials": {
          "RoleArn.$": "$.AssumedRole.AssumedRoleUser.Arn"
        },
        "Parameters": {
          "CommandId.$": "$.ExecutePlaybook1Result.Command.CommandId",
          "InstanceId.$": "$.ExecutePlaybook1Result.Command.InstanceIds[0]"
        },
        "ResultPath": "$.CheckPlaybook1Result",
        "Next": "EvaluatePlaybook1Status"
      },
      "EvaluatePlaybook1Status": {
        "Type": "Choice",
        "Choices": [
          {
            "Variable": "$.CheckPlaybook1Result.Status",
            "StringEquals": "Success",
            "Next": "ExecutePlaybook2"
          },
          {
            "Variable": "$.CheckPlaybook1Result.Status",
            "StringEquals": "InProgress",
            "Next": "WaitForPlaybook1"
          }
        ],
        "Default": "FailState"
      },
      "ExecutePlaybook2": {
        "Type": "Task",
        "Resource": "arn:aws:states:::aws-sdk:ssm:sendCommand",
        "Credentials": {
          "RoleArn.$": "$.AssumedRole.AssumedRoleUser.Arn"
        },
        "Parameters": {
          "DocumentName": "AWS-ApplyAnsiblePlaybooks",
          "InstanceIds": ["${AFTInstanceId}"],
          "Parameters": {
            "SourceType": ["S3"],
            "SourceInfo": ["{\"path\":\"https://s3.amazonaws.com/somebuckethaha/playbooks.zip\"}"],
            "InstallDependencies": ["False"],
            "PlaybookFile": ["playbook2.yml"],
            "ExtraVariables": ["SSM=True"],
            "Check": ["False"],
            "Verbose": ["-v"]
          }
        },
        "Retry": [
          {
            "ErrorEquals": ["States.ALL"],
            "IntervalSeconds": 30,
            "MaxAttempts": 3,
            "BackoffRate": 2
          }
        ],
        "Next": "WaitForPlaybook2",
        "ResultPath": "$.ExecutePlaybook2Result"
      },
      "WaitForPlaybook2": {
        "Type": "Wait",
        "Seconds": 10,
        "Next": "CheckPlaybook2Status"
      },
      "CheckPlaybook2Status": {
        "Type": "Task",
        "Resource": "arn:aws:states:::aws-sdk:ssm:getCommandInvocation",
        "Credentials": {
          "RoleArn.$": "$.AssumedRole.AssumedRoleUser.Arn"
        },
        "Parameters": {
          "CommandId.$": "$.ExecutePlaybook2Result.Command.CommandId",
          "InstanceId.$": "$.ExecutePlaybook2Result.Command.InstanceIds[0]"
        },
        "ResultPath": "$.CheckPlaybook2Result",
        "Next": "EvaluatePlaybook2Status"
      },
      "EvaluatePlaybook2Status": {
        "Type": "Choice",
        "Choices": [
          {
            "Variable": "$.CheckPlaybook2Result.Status",
            "StringEquals": "Success",
            "Next": "ExecutePlaybook3"
          },
          {
            "Variable": "$.CheckPlaybook2Result.Status",
            "StringEquals": "InProgress",
            "Next": "WaitForPlaybook2"
          }
        ],
        "Default": "FailState"
      },
      "ExecutePlaybook3": {
        "Type": "Task",
        "Resource": "arn:aws:states:::aws-sdk:ssm:sendCommand",
        "Credentials": {
          "RoleArn.$": "$.AssumedRole.AssumedRoleUser.Arn"
        },
        "Parameters": {
          "DocumentName": "AWS-ApplyAnsiblePlaybooks",
          "InstanceIds": ["${AFTInstanceId}"],
          "Parameters": {
            "SourceType": ["S3"],
            "SourceInfo": ["{\"path\":\"https://s3.amazonaws.com/somebuckethaha/playbooks.zip\"}"],
            "InstallDependencies": ["False"],
            "PlaybookFile": ["playbook3.yml"],
            "ExtraVariables": ["SSM=True"],
            "Check": ["False"],
            "Verbose": ["-v"]
          }
        },
        "Retry": [
          {
            "ErrorEquals": ["States.ALL"],
            "IntervalSeconds": 30,
            "MaxAttempts": 3,
            "BackoffRate": 2
          }
        ],
        "ResultPath": "$.ExecutePlaybook3Result",
        "Next": "WaitForPlaybook3"
      },
      "WaitForPlaybook3": {
        "Type": "Wait",
        "Seconds": 10,
        "Next": "CheckPlaybook3Status"
      },
      "CheckPlaybook3Status": {
        "Type": "Task",
        "Resource": "arn:aws:states:::aws-sdk:ssm:getCommandInvocation",
        "Credentials": {
          "RoleArn.$": "$.AssumedRole.AssumedRoleUser.Arn"
        },
        "Parameters": {
          "CommandId.$": "$.ExecutePlaybook3Result.Command.CommandId",
          "InstanceId.$": "$.ExecutePlaybook3Result.Command.InstanceIds[0]"
        },
        "ResultPath": "$.CheckPlaybook3Result",
        "Next": "EvaluatePlaybook3Status"
      },
      "EvaluatePlaybook3Status": {
        "Type": "Choice",
        "Choices": [
          {
            "Variable": "$.CheckPlaybook3Result.Status",
            "StringEquals": "Success",
            "Next": "SuccessState"
          },
          {
            "Variable": "$.CheckPlaybook3Result.Status",
            "StringEquals": "InProgress",
            "Next": "WaitForPlaybook3"
          }
        ],
        "Default": "FailState"
      },
      "SuccessState": {
        "Type": "Succeed"
      },
      "FailState": {
        "Type": "Fail",
        "Cause": "Ansible Playbook execution failed"
      }
    }
  }