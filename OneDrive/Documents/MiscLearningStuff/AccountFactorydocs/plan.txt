Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create
  ~ update in-place

Terraform will perform the following actions:

  # module.aft.module.aft_account_request_framework.aws_cloudwatch_log_group.aft_account_request_processor will be created
  + resource "aws_cloudwatch_log_group" "aft_account_request_processor" {
      + arn               = (known after apply)
      + id                = (known after apply)
      + log_group_class   = (known after apply)
      + name              = "/aws/lambda/aft-account-request-processor"
      + name_prefix       = (known after apply)
      + retention_in_days = 0
      + skip_destroy      = false
      + tags_all          = {
          + "managed_by" = "AFT"
        }
    }

  # module.aft.module.aft_iam_roles.module.ct_management_exec_role.aws_iam_role.role will be created
  + resource "aws_iam_role" "role" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = [
                              + "arn:aws:iam::381492108300:role/AWSAFTAdmin",
                              + "arn:aws:sts::381492108300:assumed-role/AWSAFTAdmin/AWSAFT-Session",
                            ]
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "AWSAFTExecution"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = {
          + "managed_by" = "AFT"
        }
      + unique_id             = (known after apply)
    }

  # module.aft.module.aft_iam_roles.module.ct_management_exec_role.aws_iam_role_policy_attachment.administrator-access-attachment will be created
  + resource "aws_iam_role_policy_attachment" "administrator-access-attachment" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AdministratorAccess"
      + role       = "AWSAFTExecution"
    }

  # module.aft.module.aft_iam_roles.module.ct_management_service_role.aws_iam_role_policy_attachment.administrator-access-attachment will be created
  + resource "aws_iam_role_policy_attachment" "administrator-access-attachment" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AdministratorAccess"
      + role       = "AWSAFTService"
    }

  # module.aft.module.aft_iam_roles.module.log_archive_service_role.aws_iam_role.role will be updated in-place
  ~ resource "aws_iam_role" "role" {
      ~ assume_role_policy    = jsonencode(
          ~ {
              ~ Statement = [
                  ~ {
                      ~ Principal = {
                          ~ AWS = [
                              ~ "AROAVRUVTTQGOZSKHFVN7:AWSAFT-Session" -> "arn:aws:iam::381492108300:role/AWSAFTAdmin",
                              ~ "AROAVRUVTTQGOZSKHFVN7" -> "arn:aws:sts::381492108300:assumed-role/AWSAFTAdmin/AWSAFT-Session",
                            ]
                        }
                        # (2 unchanged attributes hidden)
                    },
                ]
                # (1 unchanged attribute hidden)
            }
        )
        id                    = "AWSAFTService"
        name                  = "AWSAFTService"
        tags                  = {}
        # (11 unchanged attributes hidden)
    }

  # module.aft.module.aft_iam_roles.module.log_archive_service_role.aws_iam_role_policy_attachment.administrator-access-attachment will be created
  + resource "aws_iam_role_policy_attachment" "administrator-access-attachment" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AdministratorAccess"
      + role       = "AWSAFTService"
    }